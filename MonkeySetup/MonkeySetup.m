% s = sdaq.createSession;
% sdaq.addSensor(s,1,sdaq.Sensors.Barometer); % sensor channel 1
% scale = sdaq.getScaleFun(sdaq.Sensors.Barometer);

% rawdata = s.inputSingleScan;
% data = scale(rawdata);
% data = scale(s.inputSingleScan); % the two statements can be combined

% s.DurationInSeconds = 5;
% % ... add channel(s)
% rawdata = s.startForeground; % collects 2 seconds worth of data
% data = scale(rawdata); % for sensors, apply the appropriate scaling function
% 
% plot(data)

% Auto-generated by Data Acquisition Toolbox Analog Input Recorder on 27-Jun-2017 14:05:11

%% Create Data Acquisition Session
% Create a session for the specified vendor.
s = sdaq.createSession;

%% Add Channels to Session
% Add channels and set channel properties, if any.
sdaq.addSensor(s,1,sdaq.Sensors.Barometer);

lh = addlistener(s,'DataAvailable', @(src,event) plot(event.TimeStamps, event.Data));
s.NotifyWhenDataAvailableExceeds = 1000;
s.startBackground();
s.wait()

delete(lh)
%% Acquire Data
% Start the session in foreground.
% [data, timestamps, starttime] = startForeground(s);
% 
% %% Log Data
% % Convert the acquired data and timestamps to a timetable in a workspace variable.
% DAQ_4 = timetable(seconds(timestamps),data);
% 
% %% Plot Data
% % Plot the acquired data on labeled axes.
% plot(DAQ_4.Time, DAQ_4.Variables)
% xlabel('Time')
% ylabel('Amplitude (V)')
% legend(DAQ_4.Properties.VariableNames)
% 
% %% Clean Up
% % Clear the session and channels, if any.
% clear s